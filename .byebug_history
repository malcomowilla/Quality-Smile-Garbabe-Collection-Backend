continue
ActsAsTenant.current_tenant 
continue
sys_admin_id
continue
finish
sys_admin_token
q
x
customer_token
Ability.new
CustomerAbility.new(current_customer
CustomerAbility
Rails.logger.info "current_customer_ability=>#{CustomerAbility.new(current_customer)}"
continue
q
my_tenant.prefix_and_digits_for_ticket_number.inspect
my_tenant = ActsAsTenant.current_tenant
q
current_tenant.&theme_setting&.default_theme
current_tenant.theme_setting.default_theme
current_tenant.theme_setting
current_tenant.email_setting
current_tenant.company_setting
current_tenant.customers
current_tenant.admins.service_providers
q
ActsAsTenant.current_tenant
q
ActsAsTenant.current_tenant
c
@current_sys_admin
c
q
l
sys_admin_id
q
sys_admin_token
Admin.find_by(id: 207)
admin_id = decoded_token[0]['admin_id']
Admin.find_by(id: admin_id)
admin_id = decoded_token[0]['admin_id']
decoded_token = JWT.decode(token, ENV['JWT_SECRET'], true, algorithm: 'HS256')
token
exit
decoded_token_store_manager
decoded_token_store_manager = JWT.decode(store_manager_token, ENV['JWT_SECRET'], true, algorithm: 'HS256')
decoded_token_store_manager = JWT.decode(store_manager_token, 'chung', true, algorithm: 'HS256')
store_manager_token = cookies.signed[:jwt_store_manager]
store_manager_token store_manager_token = cookies.signed[:jwt_store_manager]
decoded_token_store_manager
exit
store_manager_token 
decoded_token_store_manager
decoded_token
decoded_token_store_manager
exit
decoded_token_store_manager
token
store_manager_token
exit
decoded_token_store_manager[0]['store_manager_id']
decoded_token_store_manager[0]
decoded_token_store_manager = JWT.decode(store_manager_token, ENV['JWT_SECRET'], true, algorithm: 'HS256')decoded_token_store_manager[0]
decoded_token_store_manager = JWT.decode(store_manager_token, ENV['JWT_SECRET'], true, algorithm: 'HS256')
store_manager_token
store_manager_token = request.cookie_jar.signed[:jwt_store_manager]
exit
token
decoded_token_store_manager
exit
store_manager_token = request.cookie_jar.signed[:jwt_store_manager]
exit
request.cookie_jar.signed[:jwt_store_manager]
exit
StoreManager.find_by(id: store_manager_id )
store_manager_id 
current_tenant.admins.service_providers
current_tenant.admins.company_setting
current_tenant.admins
current_tenant.theme_setting
current_tenant = ActsAsTenant.current_tenant
tenat.theme_setting
q
ActsAsTenant.current_tenant
q
ActsAsTenant.current_tenant
c
@current_sys_admin
c
q
l
sys_admin_id
q
sys_admin_token
Admin.find_by(id: 207)
admin_id = decoded_token[0]['admin_id']
Admin.find_by(id: admin_id)
admin_id = decoded_token[0]['admin_id']
decoded_token = JWT.decode(token, ENV['JWT_SECRET'], true, algorithm: 'HS256')
token
exit
decoded_token_store_manager
decoded_token_store_manager = JWT.decode(store_manager_token, ENV['JWT_SECRET'], true, algorithm: 'HS256')
decoded_token_store_manager = JWT.decode(store_manager_token, 'chung', true, algorithm: 'HS256')
store_manager_token = cookies.signed[:jwt_store_manager]
store_manager_token store_manager_token = cookies.signed[:jwt_store_manager]
decoded_token_store_manager
exit
store_manager_token 
decoded_token_store_manager
decoded_token
decoded_token_store_manager
exit
decoded_token_store_manager
token
store_manager_token
exit
decoded_token_store_manager[0]['store_manager_id']
decoded_token_store_manager[0]
decoded_token_store_manager = JWT.decode(store_manager_token, ENV['JWT_SECRET'], true, algorithm: 'HS256')decoded_token_store_manager[0]
decoded_token_store_manager = JWT.decode(store_manager_token, ENV['JWT_SECRET'], true, algorithm: 'HS256')
store_manager_token
store_manager_token = request.cookie_jar.signed[:jwt_store_manager]
exit
token
decoded_token_store_manager
exit
store_manager_token = request.cookie_jar.signed[:jwt_store_manager]
exit
request.cookie_jar.signed[:jwt_store_manager]
exit
StoreManager.find_by(id: store_manager_id )
store_manager_id 
tenat.theme_setting
tenat = ActsAsTenant.current_tenant
ActsAsTenant.current_tenant
q
ActsAsTenant.current_tenant
q
ActsAsTenant.current_tenant
c
@current_sys_admin
c
q
l
sys_admin_id
q
sys_admin_token
Admin.find_by(id: 207)
admin_id = decoded_token[0]['admin_id']
Admin.find_by(id: admin_id)
admin_id = decoded_token[0]['admin_id']
decoded_token = JWT.decode(token, ENV['JWT_SECRET'], true, algorithm: 'HS256')
token
exit
decoded_token_store_manager
decoded_token_store_manager = JWT.decode(store_manager_token, ENV['JWT_SECRET'], true, algorithm: 'HS256')
decoded_token_store_manager = JWT.decode(store_manager_token, 'chung', true, algorithm: 'HS256')
store_manager_token = cookies.signed[:jwt_store_manager]
store_manager_token store_manager_token = cookies.signed[:jwt_store_manager]
decoded_token_store_manager
exit
store_manager_token 
decoded_token_store_manager
decoded_token
decoded_token_store_manager
exit
decoded_token_store_manager
token
store_manager_token
exit
decoded_token_store_manager[0]['store_manager_id']
decoded_token_store_manager[0]
decoded_token_store_manager = JWT.decode(store_manager_token, ENV['JWT_SECRET'], true, algorithm: 'HS256')decoded_token_store_manager[0]
decoded_token_store_manager = JWT.decode(store_manager_token, ENV['JWT_SECRET'], true, algorithm: 'HS256')
store_manager_token
store_manager_token = request.cookie_jar.signed[:jwt_store_manager]
exit
token
decoded_token_store_manager
exit
store_manager_token = request.cookie_jar.signed[:jwt_store_manager]
exit
request.cookie_jar.signed[:jwt_store_manager]
exit
StoreManager.find_by(id: store_manager_id )
store_manager_id 
